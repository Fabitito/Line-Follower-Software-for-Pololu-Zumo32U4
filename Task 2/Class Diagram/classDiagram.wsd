@startuml classDiagram
top to bottom direction

package App
{
    class "MainTask" {
        + MainTask_init(void) : MainTask_Ret
    }
    
    class StateHandler
    {
        -gCurrentState: StateFunctions
        -gNextStateID: States
        -gStatesBuffer: *StateFunctions[9]
        +stateHandler(): void
        +initStatesBuffer(): void
        -stateEntryHandler(): void
        -stateProcessHandler(): void
        -stateExitHandler(): void
        -getNextState(): States
    }

    class StateDataType
    {
    
    }

    struct StateFunctions
    {
        pointerEntry: *function
        pointerProcess: *function
        pointerExit: *function
        pointerGetTransition: *function
    }

    enum States
    {
        InitializationState
        ReadyState
        CalibrationState
        ParameterSetState
        SearchingStartLineState
        DriveLapState
        LapFinishedState
        SearchTrackState
        ErrorState
    }

    class Parameters
    {
        -gSet1: struct
        -gSet2: struct
        -gSet3: struct
        +setParameterSet(): void
        +getSelectedSet(): struct
        +displayParameterSets(): void
    }

    package StatesPackage
    {
        class ReadyState
        {
            +readyStateFunctions: state
            +processPollingButtons(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class InitializationState
        {
            +initializationStateFunctions: state
            +enterDisplayNameAndRestartTimer1(): void
            +leaveStopTimer1(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class SearchingStartLineState
        {
            +searchingStartLineStateFunctions: state
            +enterRestartTimer1AndWaitFor3sAndStartDriving(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class LapFinishedState
        {
            +lapFinishedStateFunctions: state
            +enterStopTimer2AndDisplayTimeAndStopDriveAndPlayBeep(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class DriveLapState
        {
            +driveLapStateFunctions: state
            +enterRestartTimer2AndPlayBeep(): void
            +processDriveOnTrackline(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class ParameterSetState
        {
            +parameterSetStateFunctions: state
            +enterDisplayParameterSets(): void
            +processSetParamterSet(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class ErrorState
        {
            +errorStateFunctions: state
            +enterStopDriveAndPlayAlarmAndDisplayError(): void
            +processPollingButtonA(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class CalibrationState
        {
            +calibrationStateFunctions: state
            +enterCalibrate(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }

        class SearchTrackState
        {
            +searchTrackStateFunctions: state
            +enterRestartTimer1(): void
            +processFindTrackline(): void
            +leaveStopTimer1(): void
            +getTransition(): States
            +getStateFunctions(): *StateFunctions
        }
    }
}

package Service
{
    class Button {
        + Button_init(void) : void
        + Button_getState(ButtonID) : ButtonState
    }

    class Buzzer {
        + Buzzer_init(void) : void
        + Buzzer_beep(BuzzerID) : void
    }

    class Display {
        + Display_init(void) : void
        + Display_clear(void) : void
        + Display_clearLine(void) : void
        + Display_home(void) : void
        + Display_gotoxy(UInt8, UInt8) : void
        + Display_write(char*, UInt8) : void
        + Display_writeBar(UInt8) : void
    }

    class LED {
        + Led_init(void) : void
        + Led_switchOn(Led_Led) : void
        + Led_switchOff(Led_Led) : void
    }

    class DriveControl {
        + DriveControl_init(void) : void
        + DriveControl_drive(DriveControlMotorID, UInt8, DriveControl_Direction) : void
        + DriveControl_getMileage(void) : Int32
        + DriveControl_resetMileage(void) : void
    }

    class LineSensor {
        + LineSensor_init(void) : void
        + LineSensor_startCalibration(void) : void
        + LineSensor_stopCalibration(void) : void
        + LineSensor_getCalibrationState(void) : bool
        + LineSensor_read(LineSensorValues*) : void
        + LineSensor_enableEmitter(void)
        + LineSensor_disableEmitter(void) : void
    }

}

package Hal
{
    class GPIO{
        + Gpio_init(void) : Gpio_Ret
        + Gpio_write(Gpio_ID, Gpio_State) : Gpio_Ret
        + Gpio_read(Gpio_ID, Gpio_State* : Gpio_Ret
        + Gpio_alloc(Gpio_ID, UInt8*) : Gpio_Ret
        + Gpio_free(Gpio_ID, UInt8) : Gpio_Ret
    }
    class PWM{
        + Pwm_init(void) : void
        + Pwm_setDutyCycle(PwmID, UInt8) : void
    }
    class TickTimer{
        + TickTimer_init(void) : void
        + TickTimer_setCallback(TimerTickCallback) : void
        + TickTimer_get(void) : UInt64
        + TickTimer_delay(UInt8) : void
    }
    class IRQ{
        + Irq_init(void) : void
        + Irq_enable(IrqID) : void
        + Irq_disable(IrqID) : void
        + Irq_setCallback(IrqID, IrqCallback) : void
    }
}

package "OS" #DDDDDD {
    class Scheduler {
        + Scheduler_init(void) : SchedulerRet
        + Scheduler_execute(void) : void
        + Scheduler_addTask(Task*) : Scheduler_Ret
        + Scheduler_removeTask(Task*) : Scheduler_Ret
    }

    class Task {
        + Task_init(Task*, TaskWorkCallback, TaskState, void*) : Task_Ret
    }

    class SoftTimer{
        + SoftTimer_init(SoftTimer*) : void
        + SoftTimer_start(SoftTimer*, UInt16) : SoftTimer_Ret
        + SoftTimer_Stop(SoftTImer*) : SoftTimer_Ret
        + SoftTimer_Update(SoftTimer*) : void
        + SoftTimer_restart(SoftTimer*) : SoftTimer_Ret
        + SoftTimer_get(SoftTimer*) : UInt16
        + SoftTimerHandler_init(void) : void
        + SoftTimerHandler_register(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_unRegister(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_update(void) : void
        + SoftTimer_getTimeStampMs(void) : UInt64
    }

    class ErrorHandler {
        + ErrorHandler_show(ErrorHandlerErrorCode) : void
        + ErrorHandler_halt(ErrorHandlerErrorCode) : void
        + ErrorHandler_setErrorCallback(ErrorCallback) : void
        + ErrorHandler_setPrintCallback(PrintCallback) : void
    }


' ++++++++++++++++++++++++++++++++
' App
MainTask ..> StateHandler

Scheduler <.up.. MainTask : register

StateHandler ..d..> InitializationState
StateHandler ..d..> ReadyState
StateHandler ..d..> CalibrationState
StateHandler ..d..> ParameterSetState
StateHandler ..d..> SearchingStartLineState
StateHandler ..d..> DriveLapState
StateHandler ..d..> LapFinishedState
StateHandler ..d..> SearchTrackState
StateHandler ..d..> ErrorState
StateHandler..> StateDataType
InitializationState .u.> StateDataType
ReadyState .u.> StateDataType
CalibrationState .u...> StateDataType
ParameterSetState .u...> StateDataType
SearchingStartLineState .u...> StateDataType
DriveLapState .u...> StateDataType
LapFinishedState .u...> StateDataType
SearchTrackState .u...> StateDataType
ErrorState .u.> StateDataType
StateDataType ...> StateFunctions
StateDataType ...> States

Parameters ..d..> Display

InitializationState ..d..........> SoftTimer
InitializationState ..d..........> Display

ReadyState ..d....> Button

CalibrationState ..d........> LineSensor
CalibrationState ..d.....> DriveControl

ParameterSetState ..d....> Button
ParameterSetState ..d.....> Parameters

SearchingStartLineState ..d.....> SoftTimer
SearchingStartLineState ..d.........> DriveControl
SearchingStartLineState ..d.....> LineSensor

DriveLapState ..d.....> Buzzer
DriveLapState ..d....> Parameters
DriveLapState ..d....> DriveControl
DriveLapState ..d.....> LineSensor
DriveLapState ..d.....> SoftTimer

LapFinishedState ..d..> Button
LapFinishedState ..d.......> Buzzer
LapFinishedState ..d....> DriveControl
LapFinishedState ..d....> SoftTimer
LapFinishedState ..d....> Display

SearchTrackState ..d..> SoftTimer
SearchTrackState ..d......> DriveControl
SearchTrackState ..d..> LineSensor

ErrorState ..d....> Buzzer
ErrorState ..d.....> Display
ErrorState ..d.....> Button
ErrorState ..d.....> DriveControl
ErrorState ..d.....> ErrorHandler
ErrorState ..d.....> SoftTimer

' ++++++++++++++++++++++++++++++++
' Service

Button ....> GPIO
Button ..> SoftTimer

Buzzer ....> PWM
Buzzer ....> SoftTimer

Display ..> GPIO
Display ....> TickTimer
Display ..> ErrorHandler

DriveControl .....> GPIO
DriveControl ..> PWM
DriveControl ..> IRQ

LED ..> GPIO

LineSensor ..> SoftTimer
LineSensor ..> GPIO
LineSensor ..> TickTimer
LineSensor .r.> Display

' ++++++++++++++++++++++++++++++++
' OS

' ErrorHandler ..> HAL

SoftTimer ..> TickTimer

Scheduler ..> Task
Scheduler ..> IRQ


@enduml