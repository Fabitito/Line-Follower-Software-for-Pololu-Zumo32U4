@startuml
top to bottom direction

package App
{
    class Main
    {

    }
    
    class StateHandler
    {
        +process()
    }

    class Parameters
    {
        -set1: struct
        -set2: struct
        -set3: struct
        +setParameterSet(): void
        +getSelectedSet(): struct
    }

    package States
    {
        class ReadyState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Allows user to recalibrate or change parameter sets

        class InitializationState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Displays teams name and initializes robot

        class SearchingStartLineState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Starts the robot and starts the lap after detecting the startline

        class LapFinishedState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Stop the robot and lap time and emit a beep

        class DriveLapState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Drives the robot along the trackline

        class ParameterSetState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Allows the User to select between predefined parameter sets

        class ErrorState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Stops the robot and emits an alarm

        class CalibrationState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Calibrates the robots sensors

        class SearchTrackState
        {
            +enter()
            +process()
            +leave()
        }
        note top: The robot tries to redetect the Trackline
    }
}

package Service
{
    class Initializer
    {
        +init(): void
    }

    class Button
    {
        +getState(button: Buttons): bool
    }
    note left: Provides the button state

    enum Buttons
    {
        BUTTON_A
        BUTTON_B
        BUTTON_C
    }

    class TimeMeasurement
    {
        -time1: uint16
        -time2: uint16
        -time3: uint16
        +start(timer: Timers): void
        +stop(timer: Timers): void
        +reset(timer: Timers): void
        +getTime(timer: Timers): uint16
    }
    note bottom: Provides the time measurements

    enum Timers
    {
        TIMER_1
        TIMER_2
        TIMER_3
    }

    class Motor
    {
        +setDirection(motor: Motors, isForward: bool): void
        +setSpeed(motor: Motors, rpm: uint16): void
    }
    note bottom: Provides functions to control the movement of a motor

    enum Motors
    {
        MOTOR_RIGHT
        MOTOR_LEFT
    }

    class Buzzer
    {
        +playBeep(): void
        +playAlarm(): void
    }
    note left: Provides functions to emit a sound via the buzzer

    class Oled
    {
        +enable(): void
        +disable(): void
        +displayTeamName(): void
        +displayLapTime(): void
        +displayError(errorID: ErrorID): void
    }
    note left: Provides functions to control the OLED

    enum ErrorID
    {
        TRACK_NOT_FOUND
        STARTLINE_NOT_FOUND
        TIME_OUT_ERROR
    }

    class LineSensor
    {
        +calibrate(): void
        +enable(): void
        +disable(): void
        +getReflectanceValue(): uint8[]
    }
    note left: Provides functions to monitor a line sensor

}

package Hal
{
    class Gpio
    {
        +init(pinNumber: uint8): void
        +setPin(pinNumber: uint8): void
        +clrPin(pinNumber: uint8): void
        +getPin(pinNumber: uint8): bool
    }

    class Pwm
    {
        +init()
        +enable(): void
        +disable(): void
        +setDutyCycle(cycle: double): void
    }

    class Timer
    {
        +init(): void
        +enable(): void
        +disable(): void
        +getTimerCounter:() uint16
    }

    class Adc
    {
        +init(): void
        +enable(): void
        +disable(): void
        +readChannel(): void
    }
}


Main .r.> StateHandler

StateHandler ..d..> InitializationState
InitializationState ..d...........> Initializer
InitializationState ..d......> Oled
InitializationState ..d...> LineSensor

StateHandler ..d..> ReadyState
ReadyState ..d..> Button
ReadyState ..d..> TimeMeasurement

StateHandler ..d..> CalibrationState
CalibrationState .d.> LineSensor

StateHandler ..d..> ParameterSetState
ParameterSetState .d.> Oled
ParameterSetState ..> Parameters
ParameterSetState ..d..> Button

StateHandler ..d..> SearchingStartLineState
SearchingStartLineState ..d..> TimeMeasurement
SearchingStartLineState ..d..> LineSensor
SearchingStartLineState ..d..> Motor
SearchingStartLineState ..d..> Buzzer

StateHandler ..d..> DriveLapState
DriveLapState ..d..> Motor
DriveLapState ..d..> LineSensor
DriveLapState ....> Parameters

StateHandler ..d..> LapFinishedState
LapFinishedState ..d..> TimeMeasurement
LapFinishedState ..d..> Motor
LapFinishedState ..d..> Buzzer

StateHandler ..d..> ErrorState
ErrorState ..d..> Motor
ErrorState ..d..> Buzzer
ErrorState .d.> Oled

StateHandler ..d..> SearchTrackState
SearchTrackState ..d..> LineSensor

Initializer .d.> Gpio
Initializer .d.> Adc
Initializer .d.> Timer
Initializer .d.> Pwm
Button .d....> Gpio
Oled .d.......> Gpio
Oled .d.> TimeMeasurement
Motor .d.> Pwm
Buzzer .d....> Pwm
TimeMeasurement .d.> Timer
LineSensor .d.> Adc

Motor .r.> Motors
Button .r.> Buttons
Oled .r.> ErrorID
TimeMeasurement .r.> Timers

App -[hidden]down- Service
Parameters ---[hidden]down--- Button
StateHandler -[hidden]down- Service

@enduml