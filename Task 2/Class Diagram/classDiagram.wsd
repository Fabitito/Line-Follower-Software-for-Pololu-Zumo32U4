@startuml
top to bottom direction

package App
{
    class Main
    {

    }
    
    class StateHandler
    {
        +process()
    }

    class Parameters
    {
        -set1: struct
        -set2: struct
        -set3: struct
        +setSet(): void
        +getSelectedSet(): struct
    }

    package States
    {
        class InitializationState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Displays teams name and initializes robot

        class StartLapState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Start the lap time and emit beep

        class EndLapState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Stop the robot and lap time and emit a beep

        class DriveLapState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Drives the robot along the trackline

        class ParameterSetState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Allows the User to select between predefined parameter sets

        class ErrorState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Stops the robot and emits an alarm

        class CalibrationState
        {
            +enter()
            +process()
            +leave()
        }
        note top: Calibrates the robots sensors
    }
}

package Service
{
    class Initializer
    {
        +init(): void
    }

    class Button
    {
        +getState(button: Buttons): bool
    }
    note left: Provides the button state

    enum Buttons
    {
        BUTTON_A
        BUTTON_B
        BUTTON_C
    }

    class TimeMeasurement
    {
        -time: uint16
        +start(): void
        +stop(): void
        +getTime(): uint16
    }
    note bottom: Provides the total runtime time, get specific time measurements with delta_t

    class Motor
    {
        +setDirection(motor: Motors, isForward: bool): void
        +setSpeed(motor: Motors, rpm: uint16): void
    }
    note bottom: Provides functions to control the movement of a motor

    enum Motors
    {
        MOTOR_RIGHT
        MOTOR_LEFT
    }

    class Buzzer
    {
        +playBeep(): void
        +playAlarm(): void
    }
    note left: Provides functions to emit a sound via the buzzer

    class Oled
    {
        +enable(): void
        +disable(): void
        +displayTeamName(): void
        +displayLapTime(): void
        +displayError(errorID: ErrorID): void
    }
    note left: Provides functions to control the OLED

    enum ErrorID
    {
        TRACK_NOT_FOUND
        STARTLINE_NOT_FOUND
        TIME_OUT_ERROR
    }

    class LineSensor
    {
        +calibrate(): void
        +enable(): void
        +disable(): void
        +getReflectanceValue(): uint
    }
    note left: Provides functions to monitor a line sensor

}

package Hal
{
    class Gpio
    {
        +init(pinNumber: uint8): void
        +setPin(pinNumber: uint8): void
        +clrPin(pinNumber: uint8): void
        +getPin(pinNumber: uint8): bool
    }

    class Pwm
    {
        +init()
        +enable(): void
        +disable(): void
        +setDutyCycle(cycle: double): void
    }

    class Timer
    {
        +init(): void
        +enable(): void
        +disable(): void
        +getTimerCounter:() uint16
    }

    class Adc
    {
        +init(): void
        +enable(): void
        +disable(): void
        +readChannel(): void
    }
}



StateHandler ..d..> InitializationState
StateHandler ..d..> StartLapState
StateHandler ..d..> EndLapState
StateHandler ..d..> DriveLapState
StateHandler ..d..> ParameterSetState
StateHandler ..d..> CalibrationState
StateHandler ..d..> ErrorState

InitializationState .d.........> Oled
InitializationState .d...........> LineSensor
InitializationState .d.> Button
InitializationState .d.> Initializer

StartLapState .d....> Motor
StartLapState .d.> LineSensor
StartLapState .d.> TimeMeasurement
StartLapState .d.> Buzzer

EndLapState .d.> TimeMeasurement
EndLapState .d.> Motor
EndLapState .d.> Buzzer
EndLapState .d.> Oled

DriveLapState .d.> Motor
DriveLapState .d.> LineSensor
DriveLapState .d.> Parameters

ParameterSetState .d.> Parameters
ParameterSetState .d.> Button

CalibrationState .d.> LineSensor

ErrorState .d.> Motor
ErrorState .d.> Buzzer
ErrorState .d.> Oled

Initializer .d.> Gpio
Initializer .d.> Adc
Initializer .d.> Timer
Initializer .d.> Pwm

Main .r.> StateHandler

Button .d....> Gpio
Motor .d.> Pwm
Buzzer .d....> Pwm
TimeMeasurement .d.> Timer
LineSensor .d.> Adc

Motor ..> Motors
Button ..> Buttons
Oled ..> ErrorID

App -[hidden]down- Service
Parameters ---[hidden]down--- Button
StateHandler -[hidden]down- Service

@enduml